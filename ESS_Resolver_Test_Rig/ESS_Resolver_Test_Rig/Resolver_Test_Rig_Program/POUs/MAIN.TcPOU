<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="MAIN" Id="{ed9b3e07-4467-47c3-9766-2d2ed915d21b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
		// stepper function blocks  
	mcPower_1 : MC_Power;
	mcReset_1 : MC_Reset;
	mcJogging_1 : MC_Jog;
	mcMoveAbs_1 : MC_MoveAbsolute;
	mcMoveRel_1 : MC_MoveRelative;
	mcStop : MC_Stop;
	mcHome_1 : MC_Home;
	
	bEnableAxis_1 : BOOL;
	bJogForwards : BOOL;
	bJogBackwards: BOOL;
	eJogMode : E_JogMode; 
	bMoveDone : BOOL;	
	bAbsMove: BOOL;
	bRelMove: BOOL;
	
	heartbeat: BYTE; 
	//FbStageMotion : FB_Stage_Motion;

	bStop: BOOL;
	bHomeAxis_1: BOOL;

	// action Variables
	mcMoveAbsTest_1 : MC_MoveAbsolute;
	mcMoveAbsTestReturn_1 : MC_MoveAbsolute;
	iState : DINT;
	bStartTest : BOOL;
	bFinishTest: BOOL;
	fbReturnTimer : TON; // timer delay for the cycle to return home.
	fbDutyCycleTimer : TON; // timer duty cycle so the delay between cycles
	bStartReturnTimer : BOOL;
	bStartDutyCycleTimer : BOOL;	
	fbTestCycleCounter  : CTU;
	bCycleComplete : BOOL;
	bCycleCounterReset : BOOL;
	bTestFinished : BOOL;
	bTestRelMove: BOOL;
	
// ENCODER CSV variables
	EncoderCSVData: ST_EncoderCSVData; 
//Unixtime stuff
    unixTime: UnixTimestamp;
    timestampMilliseconds         : ULINT;	

	bEnableAxisPosative_1: BOOL;
	bEnableAxisNegative_1: BOOL;
END_VAR

VAR_INPUT
	fAbsPos_1: LREAL;
	fRelDistance: LREAL;
	fRelTestDistance: LREAL;
	fAbsTestDistance: LREAL;
	fHomePosition: LREAL;
	fAxisVelocity: LREAL;
	fAxisAcceleration: LREAL;
	// action Variables
	iCycleCount : WORD;
	fReturnTime: TIME;
	uInputReurnTime :UDINT;
	fDutyCycleTime: TIME;
	uInputCycleTime :UDINT;
	
			// Digital Inputs
	LimitSwitchInput_1 AT %I* : BOOL;
	LimitSwitchInput_2 AT %I* : BOOL;
			// Analogue inputs
	ThermoCoupleChannel_1 AT %I*: REAL;
	ThermoCoupleChannel_2 AT %I*: REAL;
	ThermoCoupleChannel_3 AT %I*: REAL;
	ThermoCoupleChannel_4 AT %I*: REAL;
END_VAR

VAR_OUTPUT
// action Variables	
	iCurrentCycleValue : WORD;
		// Digital outputs
	LimitSwitchOutput_1 AT %Q* : BOOL;
	LimitSwitchOutput_2 AT %Q* : BOOL;
	EncoderPowerOutput_3 AT %Q* : BOOL;
	EncoderPowerOutput_6 AT %Q* : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[heartbeat := heartbeat + 1;

Limit_Switch();
EncoderPowerOutput_3 := TRUE;
EncoderPowerOutput_6 := TRUE;

mcStop(Axis := GVL.stAxis_1, Execute := bStop,);

mcPower_1(Axis := GVL.stAxis_1, Enable := bEnableAxis_1, Enable_Positive := bEnableAxisPosative_1, Enable_Negative := bEnableAxisNegative_1, Override := 100.0);

mcReset_1(Axis := GVL.stAxis_1, Execute := NOT(bEnableAxis_1));

mcJogging_1(Axis := GVL.stAxis_1, JogForward := bJogForwards, JogBackwards := bJogBackwards, Velocity := fAxisVelocity, Acceleration := fAxisAcceleration, Deceleration := fAxisAcceleration, Jerk := 0.8);

mcMoveAbs_1 (Axis := GVL.stAxis_1, Execute := bAbsMove, Position := fAbsPos_1, Velocity := fAxisVelocity, Acceleration := fAxisAcceleration, Deceleration := fAxisAcceleration);
bAbsMove := FALSE;

mcMoveRel_1(Axis := GVL.stAxis_1, Execute := bRelMove, Distance := fRelDistance, Velocity := fAxisVelocity, Acceleration := fAxisAcceleration, Deceleration := fAxisAcceleration);
bRelMove := FALSE;

//mcHome_1(Axis := GVL.stAxis_1, Execute := bHomeAxis_1, Position := fHomePosition);

Test_Routine();

// start of CSV data collection
EncoderCSVData.AxisPosition := GVL.stAxis_1.NcToPlc.ActPos ;
EncoderCSVData.CurrentCycle := iCycleCount ;
EncoderCSVData.PositalPosition := GVL.stAxis_2.NcToPlc.ActPos ;
EncoderCSVData.KublerPosition := GVL.stAxis_3.NcToPlc.ActPos ;
EncoderCSVData.AMOPosition := GVL.stAxis_4.NcToPlc.ActPos ;
EncoderCSVData.ThermoCouple[0] := ThermoCoupleChannel_1 ;
EncoderCSVData.ThermoCouple[1] := ThermoCoupleChannel_2 ;
EncoderCSVData.ThermoCouple[2] := ThermoCoupleChannel_3 ;
EncoderCSVData.ThermoCouple[3] := ThermoCoupleChannel_4 ;

unixTime();
EncoderCSVData.UnixTime := unixTime.milliseconds;
P_CSVWriter.stimeString := unixTime.timeString;
P_CSVWriter.testEncoderData := EncoderCSVData;
P_CSVWriter(     bNewData            :=    TRUE); 
]]></ST>
    </Implementation>
    <Action Name="Limit_Switch" Id="{b3b7bac8-26ca-4866-bea2-1a68ac32b6f9}">
      <Implementation>
        <ST><![CDATA[LimitSwitchOutput_1 := TRUE;
LimitSwitchOutput_2 := TRUE;

IF LimitSwitchInput_1 THEN
	bEnableAxisPosative_1 := TRUE;
ELSE
	bEnableAxisPosative_1 := FALSE ;	
	
END_IF

IF LimitSwitchInput_2 THEN
	bEnableAxisNegative_1 := TRUE;
ELSE
	bEnableAxisNegative_1 := FALSE ;	
	
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Test_Routine" Id="{63bc1eb6-c2bb-4839-87a7-c55c6bea2977}">
      <Implementation>
        <ST><![CDATA[mcMoveAbsTest_1(Axis := GVL.stAxis_1, Position := 10, Velocity := fAxisVelocity, Acceleration := fAxisAcceleration, Deceleration := fAxisAcceleration);	
mcMoveAbsTest_1.Execute := FALSE;
fbReturnTimer( IN := bStartReturnTimer, PT := fReturnTime);	
mcMoveAbsTestReturn_1(Axis := GVL.stAxis_1, Position := 0, Velocity := fAxisVelocity, Acceleration := fAxisAcceleration, Deceleration := fAxisAcceleration);
mcMoveAbsTestReturn_1.Execute := FALSE;
fbReturnTimer( IN := bStartReturnTimer, PT := fReturnTime);	
fbDutyCycleTimer( IN := bStartDutyCycleTimer, PT := fDutyCycleTime);	
fbTestCycleCounter(CU := bCycleComplete, RESET := bCycleCounterReset, PV := iCycleCount);
fReturnTime:= UDINT_TO_TIME(uInputReurnTime);
fDutyCycleTime:= UDINT_TO_TIME(uInputCycleTime);
CASE iState OF
	
	// initialising the state machine so starting a homing rotuine reseting the counter to 0 
	0: 
		iState := 10;
	10: 
		IF bStartTest THEN
			P_CSVWriter(bOpen:=TRUE);
			iState := 20;
		END_IF
	
	20:
		
		mcMoveAbsTest_1.Execute := TRUE;
		IF mcMoveAbsTest_1.Done THEN
			bStartReturnTimer := TRUE;
			iState := 30;
		END_IF

	30:
		fbReturnTimer( IN := bStartReturnTimer, PT := fReturnTime);	
		IF MAIN.fbReturnTimer.Q THEN
			bStartReturnTimer := FALSE;
			iState := 40;
		END_IF
	

	40:
		mcMoveAbsTestReturn_1.Execute := TRUE;
		IF mcMoveAbsTestReturn_1.Done THEN
			bStartDutyCycleTimer := TRUE;
			iState := 50;
		END_IF	
	
	50:
		fbDutyCycleTimer( IN := bStartDutyCycleTimer, PT := fDutyCycleTime);	
		IF MAIN.fbDutyCycleTimer.Q THEN
			bStartDutyCycleTimer := FALSE;
			iState := 60;
		END_IF

	60: bCycleComplete := TRUE;
		iState := 70;
	
	70: fbTestCycleCounter(CU := bCycleComplete, RESET := bCycleCounterReset, PV := iCycleCount);
		IF MAIN.fbTestCycleCounter.Q THEN
			iState := 90; 
		ELSE
		bCycleComplete := FALSE;	
		iState := 20;
		END_IF
	
	90: bStartTest := FALSE;
		bFinishTest := TRUE;
		P_CSVWriter(bClose   :=  TRUE);
		iState := 10;
	
ELSE
	;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Thermo_Couple" Id="{3a8aed03-d895-41ec-a963-8fc2b1e6ee52}">
      <Implementation>
        <ST><![CDATA[IF ThermoCoupleChannel_1 > 40 THEN
	bEnableAxis_1 := FALSE ;
		
	
END_IF

IF ThermoCoupleChannel_2 > 40 THEN
	bEnableAxis_1 := FALSE ;
		
	
END_IF
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="MAIN">
      <LineId Id="185" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="337" Count="1" />
      <LineId Id="84" Count="1" />
      <LineId Id="21" Count="7" />
      <LineId Id="45" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="431" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="429" Count="0" />
      <LineId Id="432" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="435" Count="1" />
      <LineId Id="434" Count="0" />
      <LineId Id="437" Count="1" />
      <LineId Id="428" Count="0" />
      <LineId Id="420" Count="1" />
      <LineId Id="419" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="69" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.Limit_Switch">
      <LineId Id="2" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="27" Count="6" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.Test_Routine">
      <LineId Id="18" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="86" Count="2" />
      <LineId Id="92" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="2" Count="5" />
      <LineId Id="20" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="48" Count="2" />
      <LineId Id="84" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="32" Count="2" />
      <LineId Id="42" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.Thermo_Couple">
      <LineId Id="1" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="2" Count="1" />
      <LineId Id="10" Count="4" />
      <LineId Id="9" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>